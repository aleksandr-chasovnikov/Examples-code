Далее можно добавить немного удобства при работе с компонентом. Во-первых, чтобы видеть компонент cart в списке автодопления IDE при вводе Yii::$app-> нужно сообщить IDE, что у класса WebApplication есть свойство $cart, которое является экземпляром класса frontend\components\Cart. Как это было описано в статье Автозавершение кода для собственных компонентов, создадим свой файл Yii.php с таким же содержимым, как и тот, что в папке vendor/yiisoft/yii2 и добавим к тому коду, что есть, следующий:

/**
 * Class WebApplication
 *
 * @property frontend\components\Cart $cart
 */
abstract class WebApplication extends yii\web\Application
{
}
После этого не забудьте пометить пометить файл vendor/yiisoft/yii2/Yii.php как простой текстовый файл, как это было описано в вышеуказанной статье.
Кроме того, чтобы при вводе Yii::$app->cart-> кроме getOrder() и getStatus() получать в списке автодополнения ещё и их сокращённые формы order и status, перед определением класса Cart добавьте соответствующие PHPDoc-комментарии:

/**
 * Class Cart
 * @package frontend\components
 *
 * @property Order $order
 * @property string $status
 */

-----------------------------------------------------------------

 Для оформления заказа вы можете написать класс OrderForm, унаследовав его от yii\base\Model. В классе реализуйте метод, который будет проверять введённые пользователем в форму личные данные, сохранять их, затем изменять статус заказа на “Оформлен”, отправлять оповещение администратору магазина о новом заказе и очищать корзину. Для последнего действия, придётся в класс нашего компонента добавить простой метод clean:
 public function clean()
{
    Yii::$app->session->remove(self::SESSION_KEY);
}