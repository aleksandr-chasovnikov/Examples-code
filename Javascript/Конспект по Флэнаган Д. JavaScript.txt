
Объект - коллекция пар имя/значение или отображение строки в значение.

Массив - список с числовыми индексами.

'two' > 'three'; //true: при упорядочивании по алфавиту 'tw' больше 'th'

//Определение функции-конструктора для инициализации объекта Point:
function Point(x, y) { //По соглашению имя конструтора - с большой буквы
	this.x = x;
	this.y = y;
}

//создать новый экземпляр:
var p = new Point(1, 1);


JS - чувств-н к регистру.

Встроееные классы JS:
- Array
- Function
- Date
- RegExp
- Error

null и undefined - единственные типы, не имеющие методов.

Изменяемые типы: объекты и массивы
Неизменяемые: null, undefined, строки(!), числа.

---------------------------------------------------------
Математические операции:

Math.pow(2, 53)		//2 в степени 53
Math.pow(3, 1/3)	//Корень кубический из 3
Math.round(.6)		//округл до ближ целого
Math.ceil(.6)		//округл вверх
Math.floor(.6)		//округл вниз
Math.abs(-5)		//модуль числа
Math.max(x,y,z)		//
Math.min(x,y,z)		//
Math.random()		//рандом от 0 до 1
Math.PI 			//пи
Math.E 				//е (основание натур логарифма)
Math.sqrt(3)		//Корень квадратный из 3
Math.sin(0)			//
Math.log(10)		//Натур логарифм из 10
Math.exp(3)			//Math.E в кубе

Infinity - результат больше самого большого представимого значения (переполнение).
-Infinity - в меньшую сторону.
NaN - "не число".

NaN != NaN
1/0 != 1/-0 (Infinity != -Infinity)

Могут быть проблемы с вещественными числами (0.1): они неточны.

---------------------------------------------------------
ДАТА И ВРЕМЯ:

var later = new Date(2010, 0, 1, 17, 10, 30) 	//01.01.2010 17:10:30

later.getFullYear()		//2010
later.getMonth()		//0 - счет месяцев с нуля
later.getDate()			//1
later.getDay()			//5 (пятница, 0 - воскресенье)
later.getHours()		//17
later.getUTCHours()		//часы по UTC(по час.поясам)
later.toString()		//Fri Jan 01 2010 17:10:30 GMT+0300
later.toUTCString()		//Fri, 01 Jan 01 2010 14:10:30 GMT
later.toLocaleDateString()	//1 Января 2010
later.toLocaleTimeString()	//17:10:30
later.toISOString()			//2010-01-01T14:10:30.000Z

---------------------------------------------------------
СТРОКИ

В ECMAScript 3 строковые литералы не могут разбиваться на две строчки, но в ECMAScript 5 - могут, заканчивая каждую строчку, кроме последней символом обратного слэша "\".

Для экранирования спецсимволов испол-ся обр.слэш.

var s = "hello, world"
s.charAt(0)
s.charAt(s.length-1)
s.subsctring(1, 4)
s.slice(1, 4)
s.slice(-3)
s.indexOf("l")
s.lastIndexOf("l")
s.indexOf("l", 3)
s.
s.
---------------------------------------------------------

---------------------------------------------------------

---------------------------------------------------------

---------------------------------------------------------

---------------------------------------------------------

---------------------------------------------------------

---------------------------------------------------------

---------------------------------------------------------
